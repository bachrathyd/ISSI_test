#import Pkg

using DifferentialEquations
using LinearAlgebra
using Random

using Plots

using StaticArrays

using BenchmarkTools

using Statistics
using Interpolations
"\$\\alpha\$"

using Revise
#push!(LOAD_PATH,"C:/Users/Bachrathy/.julia/dev/ISSI_test/sandbox")
push!(LOAD_PATH,"C:/Users/Mechanics/Documents/Bachrathy/Git/ISSI_test/sandbox")
using SimulationBasedStability


Neval=0    
function delay_mathieu_model(du,u,h,p,t)
    global Neval
    Neval += 1;
    δ, ϵ, b, κ, τ = p
    du[1] = - κ * u[1] - (δ + ϵ * cos(t)) * u[2] + b * h(p, t-τ)[2] + 0.0*cos(4*t)
    du[2] = u[1]
end


δ=0.50
ϵ=0.003
b=0.05
κ=0.1
τ=2pi 
T=4pi

p=( δ, ϵ, b, κ, τ )
h(p, t) = [0.0,0.0] .* (1.0+1.0im)
lags = [τ]
taumax=maximum(lags)
tspan = (0.0, T) # The end of the integration time considert to be the timeperiod of the system.

#u0=([big(1.0)+1.0im,big(1.0)+1.0im]) TODO: test bigfloat
u0=([1.0+1.0im,1.0+1.0im])
#u0=[0.0,0.0];
prob = DDEProblem(delay_mathieu_model, u0, h, tspan, p; constant_lags = lags,reltol=1e-2,abstol=1e-2,dtmax=T/20);#
alg = MethodOfSteps(Tsit5());
@time just_a_test_solution=solve(prob,alg);
plot(just_a_test_solution)


#=
#to JIT precomply
@time begin 
    
alg = MethodOfSteps(Tsit5());
    Neval=0    
prob = DDEProblem(delay_mathieu_model, u0, h, tspan, p; constant_lags = lags,reltol=1e-2,abstol=1e-2,dtmax=T/10);#
DelayMathieu_egi_prblem=dynamic_problem(prob,alg,taumax,Historyresolution=50,eigN=4,zerofixpont=true,maxiteration=4);
@show eimax=spectralRadiusOfMapping(DelayMathieu_egi_prblem);
@show Neval

end

#Reference solution
@time begin 
    MethodOfSteps(Rosenbrock23())
    MethodOfSteps(Rodas4())
alg = MethodOfSteps(Tsit5());
    Neval=0    
    ϵtol=1e-5
prob = DDEProblem(delay_mathieu_model, u0, h, tspan, p; constant_lags = lags,reltol=ϵtol,abstol=ϵtol,dtmax=T/40);#
 DelayMathieu_egi_prblem=dynamic_problem(prob,alg,taumax,Historyresolution=50,eigN=6,zerofixpont=true,maxiteration=6);
@show eimax=spectralRadiusOfMapping(DelayMathieu_egi_prblem);
@show Neval
end

=#


0.8495221650291361 #reltol=1e-5,abstol=1e-5,dtmax=T/40);#
eimax=0.8496127142756152#ϵtol=1e-6, dtmax=T/40);#
      0.8495221640692803#ϵtol=1e-5, dtmax=T/40,eigN=6,zerofixpont=true,maxiteration=6);#
## --------


#begin>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>y
#alg = MethodOfSteps(BS3());
#Resi=10 .^ (1.0:-0.1:-3)#5

alg = MethodOfSteps(Tsit5());
Resi=10 .^ (1.0:-0.05:-2.5)#5

Resi=vcat(Resi,Resi[end]/10)
#alg = MethodOfSteps(Vern6())
#Resi=10 .^ (1.0:-0.1:-2)
#alg = MethodOfSteps(DP8());#szuperzajos


Ni=zeros(Int64,size(Resi))
ti=zeros(size(Resi))
epsi=zeros(size(Resi))
for k in 1:size(Resi)[1]
    println(k/size(Resi)[1])
    begin 
        Neval=0    

        #Adaptive timestep
        
        prob = DDEProblem(delay_mathieu_model, u0, h, tspan, p; constant_lags = lags,reltol=Resi[k],abstol=Resi[k]);#,dtmax=T/20

        ##Fixed timestep
        #prob = DDEProblem(delay_mathieu_model, u0, h, tspan, p; constant_lags = lags,adaptive=false,dt=T*Resi[k]);#,dtmax=T/20
      
        #DelayMathieu_egi_prblem=dynamic_problem(prob,alg,taumax,Historyresolution=100,eigN=6,zerofixpont=true,maxiteration=4);
        #spectralRadiusOfMapping!(DelayMathieu_egi_prblem);
        
        ti[k]=@elapsed DelayMathieu_egi_prblem=spectralRadiusOfMapping(prob,alg,taumax,Historyresolution=100,eigN=6,zerofixpont=true,maxiteration=4);
        epsi[k]=abs(DelayMathieu_egi_prblem.eigs[1]);
        Ni[k]=Neval
    end
end


eimax=epsi[end]


Ndrop=3;
Resi=Resi[Ndrop:end-1]
Ni=Ni[Ndrop:end-1]
epsi=epsi[Ndrop:end-1]
ti=ti[Ndrop:end-1]

f=(x)->log.(abs.(x)) ./ log(10)
p1=plot(f.(Resi),f.(Ni), xlabel = "\$log_{10} ϵ\$", ylabel = "\$log_{10} N_i\$")
p2=plot(f.(Resi),f.(epsi .- eimax), xlabel = "\$log_{10} ϵ\$", ylabel = "\$log_{10} ϵ_μ\$")
p3=plot(f.(Ni),f.(epsi .- eimax), xlabel = "\$log_{10} N_i\$", ylabel = "\$log_{10} ϵ_μ\$")
p4=plot(f.(ti),f.(epsi .- eimax), xlabel = "\$log_{10} T_{CPU}\$", ylabel = "\$log_{10} ϵ_μ\$")

#plot(f.(Ni),f.(ti))
#plot(f.(Resi),f.(ti))
plot(p1, p2, p3, p4, layout = (2, 2), legend = false)
#Ni ./ (Resi ) ./ 6.0 ./ 5.0
#end>>>>>>>>>>>>>>>>>>>>